import { Logger as WinLogger } from "winston";
import developmentLogger from "./logger/development";
import productionLogger from "./logger/production";
import testLogger from "./logger/test";

/**
 * Logger class to facilitate logging operations.
 * This class uses a Singleton pattern ensuring a single instance of the logger.
 */
class Logger {
	/** @private @type {WinLogger} The internal logger instance. */
	private logger: WinLogger;

	/** @private @type {Logger} Static instance of the Logger class for the Singleton pattern. */
	private static _instance: Logger;

	/** @private @type {string | null} Path to the logging folder. */
	private loggingFolder: string | null = null;

	/**
	 * Constructs the Logger instance with a default logger configuration.
	 */
	constructor() {
		this.logger = developmentLogger(this.loggingFolder);
	}

	/**
	 * Getter for the Logger instance (Singleton).
	 * @static
	 * @returns {Logger} The single instance of the Logger class.
	 */
	public static get instance(): Logger {
		return this._instance || (this._instance = new this());
	}

	/**
	 * Logs informational messages.
	 * @param {string} message - The message to log.
	 * @param {Object.<string, string>} [meta] - Additional metadata for the log.
	 */
	public info = (message: string, meta?: { [key: string]: string }): void => {
		this.logger.log("info", message, meta);
	};

	/**
	 * Logs debug messages.
	 * @param {string} message - The message to log.
	 * @param {Object.<string, string>} [meta] - Additional metadata for the log.
	 */
	public debug = (message: string, meta?: { [key: string]: string }): void => {
		this.logger.log("debug", message, meta);
	};

	/**
	 * Logs warning messages.
	 * @param {string} message - The message to log.
	 * @param {Object.<string, string>} [meta] - Additional metadata for the log.
	 */
	public warn = (message: string, meta?: { [key: string]: string }): void => {
		this.logger.log("warn", message, meta);
	};

	/**
	 * Logs HTTP-related messages.
	 * @param {string} message - The message to log.
	 * @param {Object.<string, string>} [meta] - Additional metadata for the log.
	 */
	public http = (message: string, meta?: { [key: string]: string }): void => {
		this.logger.log("http", message, meta);
	};

	/**
	 * Logs error messages.
	 * @param {string} message - The message to log.
	 * @param {Object.<string, string>} [meta] - Additional metadata for the log.
	 */
	public error = (
		message: string | Error,
		meta?: { [key: string]: string },
	): void => {
		this.logger.log("error", message.toString(), meta);
	};

	/**
	 * Logs verbose messages.
	 * @param {string} message - The message to log.
	 * @param {Object.<string, string>} [meta] - Additional metadata for the log.
	 */
	public verbose = (message: string, meta?: { [key: string]: string }): void => {
		this.logger.log("verbose", message, meta);
	};

	/**
	 * Configures the logger instance with given options.
	 * @param {Object} options - The configuration options.
	 * @param {string} [options.logLevel] - The level of logs to capture.
	 * @param {string} [options.logger] - The logger type ("production", "test", "development").
	 * @param {string} [options.logging_folder] - Path to the logging folder.
	 */
	public configure(options?: {
		logLevel?: string;
		logger?: string;
		loggingFolder?: string;
		logHelthCheckLevel?: string;
	}) {
		// If the logging folder path is provided in options, update it.
		if (options?.loggingFolder) {
			this.loggingFolder = options.loggingFolder;
		}

		// If the logger type is provided in options, switch to the appropriate logger configuration.
		if (options?.logger) {
			switch (options.logger) {
				case "production":
					this.logger = productionLogger(this.loggingFolder ?? "./logs");
					break;
				case "test":
					this.logger = testLogger();
					break;
				default:
					this.logger = developmentLogger(this.loggingFolder);
					break;
			}
		}

		// If the log level is provided in options, set it for the logger.
		if (options?.logLevel) {
			this.logger.transports[0].level = options.logLevel;
		}
	}
}

/** @type {Logger} Export the single instance of the Logger class. */
export default Logger.instance;
