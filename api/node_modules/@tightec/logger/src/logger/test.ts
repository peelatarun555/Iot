import { Logger, createLogger, format, transports } from "winston";
import logLevel from "../utils/log_levels";
import { getColorizedLevel } from "../utils/colors";

/**
 * Creates and returns a test logger instance using the winston library.
 * This logger is specifically configured for test environments.
 *
 * The console output is color-coded based on the log level and includes timestamps.
 * In a test environment, the logger only outputs error messages to the console to reduce noise.
 *
 * Unlike development or production loggers, this logger does not log to files, only to the console.
 *
 * @returns {Logger} The configured logger instance for test environment.
 */
export default function testLogger(): Logger {
	return createLogger({
		levels: logLevel,
		transports: [
			new transports.Console({
				level: "error",
				format: format.combine(
					format.timestamp({ format: "YYYY-MM-DD HH:mm:ss" }),
					format.errors({ stack: true }),
					format.printf(({ level, message, timestamp, meta }) => {
						let rstr = `${getColorizedLevel(level)} ${timestamp} - ${message}`;

						if (meta && meta["responseTime"]) {
							rstr += " - " + meta["responseTime"] + "ms";
						}
						return rstr;
					}),
				),
			}),
		],
	});
}
