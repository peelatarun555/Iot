import { createLogger, format, Logger, transport, transports } from "winston";
import logLevel, { logLevelMapper } from "../utils/log_levels";
import { getColorizedLevel } from "../utils/colors";

/**
 * Creates and returns a development logger instance using the winston library.
 * This logger is configured to output both to the console and to files.
 *
 * The console output is color-coded based on the log level and includes timestamps.
 * The file output is structured in JSON format and separated by log levels.
 *
 * @param {string | null} logging_folder - The path to the folder where log files should be saved.
 * @returns {Logger} The configured logger instance for development environment.
 */
export default function developmentLogger(
	logging_folder: string | null,
): Logger {
	const loggerTransports: transport[] = [
		new transports.Console({
			level: "debug",
			format: format.combine(
				format.timestamp({ format: "YYYY-MM-DD HH:mm:ss" }),
				format.errors({ stack: true }),
				format.printf(({ level, message, timestamp, meta }) => {
					let rstr = `${getColorizedLevel(level)} ${timestamp} - ${message}`;

					if (meta && meta["responseTime"]) {
						rstr += " - " + meta["responseTime"] + "ms";
					}
					return rstr;
				}),
			),
		}),
	];

	if (logging_folder != null) {
		loggerTransports.push(
			new transports.File({
				level: "info",
				format: format.combine(
					format.timestamp({
						format: "YYYY-MM-DD HH:mm:ss",
					}),
					format.printf(
						({ level, message, timestamp, ...metadata }) =>
							JSON.stringify({
								time: timestamp,
								level: logLevelMapper(level),
								message: message,
								meta:
									metadata != null && Object.entries(metadata).length > 0
										? metadata
										: undefined,
							}) + ",",
					),
				),
				filename: logging_folder + "/info_debug.log",
			}),
		);

		loggerTransports.push(
			new transports.File({
				level: "warn",
				format: format.combine(
					format.timestamp({
						format: "YYYY-MM-DD HH:mm:ss",
					}),
					format.printf(
						({ level, message, timestamp, ...metadata }) =>
							JSON.stringify({
								time: timestamp,
								level: logLevelMapper(level),
								message: message,
								meta:
									metadata != null && Object.entries(metadata).length > 0
										? metadata
										: undefined,
							}) + ",",
					),
				),
				filename: logging_folder + "/warn_debug.log",
			}),
		);
	}

	return createLogger({
		levels: logLevel,
		transports: loggerTransports,
	});
}
