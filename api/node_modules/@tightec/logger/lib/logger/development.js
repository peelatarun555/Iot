"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = developmentLogger;
const winston_1 = require("winston");
const log_levels_1 = __importStar(require("../utils/log_levels"));
const colors_1 = require("../utils/colors");
function developmentLogger(logging_folder) {
    const loggerTransports = [
        new winston_1.transports.Console({
            level: "debug",
            format: winston_1.format.combine(winston_1.format.timestamp({ format: "YYYY-MM-DD HH:mm:ss" }), winston_1.format.errors({ stack: true }), winston_1.format.printf(({ level, message, timestamp, meta }) => {
                let rstr = `${(0, colors_1.getColorizedLevel)(level)} ${timestamp} - ${message}`;
                if (meta && meta["responseTime"]) {
                    rstr += " - " + meta["responseTime"] + "ms";
                }
                return rstr;
            })),
        }),
    ];
    if (logging_folder != null) {
        loggerTransports.push(new winston_1.transports.File({
            level: "info",
            format: winston_1.format.combine(winston_1.format.timestamp({
                format: "YYYY-MM-DD HH:mm:ss",
            }), winston_1.format.printf(({ level, message, timestamp, ...metadata }) => JSON.stringify({
                time: timestamp,
                level: (0, log_levels_1.logLevelMapper)(level),
                message: message,
                meta: metadata != null && Object.entries(metadata).length > 0
                    ? metadata
                    : undefined,
            }) + ",")),
            filename: logging_folder + "/info_debug.log",
        }));
        loggerTransports.push(new winston_1.transports.File({
            level: "warn",
            format: winston_1.format.combine(winston_1.format.timestamp({
                format: "YYYY-MM-DD HH:mm:ss",
            }), winston_1.format.printf(({ level, message, timestamp, ...metadata }) => JSON.stringify({
                time: timestamp,
                level: (0, log_levels_1.logLevelMapper)(level),
                message: message,
                meta: metadata != null && Object.entries(metadata).length > 0
                    ? metadata
                    : undefined,
            }) + ",")),
            filename: logging_folder + "/warn_debug.log",
        }));
    }
    return (0, winston_1.createLogger)({
        levels: log_levels_1.default,
        transports: loggerTransports,
    });
}
